As an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications. 
In the following "hello world" example, many connections can be handled concurrently. 
Upon each connection, the callback is fired, but if there is no work to be done, Node.js will sleep.

Furthermore, users of Node.js are free from worries of dead-locking the process, since there are no locks. 
Almost no function in Node.js directly performs I/O, so the process never blocks except when the I/O is performed using synchronous methods of Node.js standard library. 
Because nothing blocks, scalable systems are very reasonable to develop in Node.js.

Node.js is an open source server environment
Node.js is free
Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
Node.js uses JavaScript on the server

-----------------------------------------------------
Blocking methods execute synchronously and non-blocking methods execute asynchronously.

Using the File System module as an example, this is a synchronous file read:
const fs = require('fs');
const data = fs.readFileSync('/file.md'); // blocks here until file is read

And here is an equivalent asynchronous example:
const fs = require('fs');
fs.readFile('/file.md', (err, data) => {
  if (err) throw err;
});

The first example appears simpler than the second but has the disadvantage of the second line blocking the execution of any additional JavaScript until the entire file is read. 
Note that in the synchronous version if an error is thrown it will need to be caught or the process will crash. 
In the asynchronous version, it is up to the author to decide whether an error should throw as shown.
---------------------------------------------
A common task for a web server can be to open a file on the server and return the content to the client.

Here is how PHP or ASP handles a file request:
1.   Sends the task to the computer's file system.
2.   Wait's while the file system opens and reads the file.
3.   Return's the content to the client.
4.   Ready to handle the next request.

Here is how Node.js handles a file request:
1.   Sends the task to the computer's file system.
2.   Ready to handle the next request.
3.   When the file system has opened and read the file, the server returns the content to the client.
4.   Node.js eliminates the waiting, and simply continues with the next request.

Node.js runs single-threaded, non-blocking, asynchronous programming, which is very memory efficient.

What Can Node.js Do?
1.   Node.js can generate dynamic page content
2.   Node.js can create, open, read, write, delete, and close files on the server
3.   Node.js can collect form data
4.   Node.js can add, delete, modify data in your database
---------------------------------------------------------------------------------

What is a Node.js File?
1.   Node.js files contain tasks that will be executed on certain events
2.   A typical event is someone trying to access a port on the server
3.   Node.js files must be initiated on the server before having any effect
4.   Node.js files have extension ".js"